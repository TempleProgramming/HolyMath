Cd(__DIR__);;

#define ARCH_SUPPORTS_AVX	FALSE
#define ARCH_SUPPORTS_AVX2	TRUE

#include "../HolyMath/MakeHolyMath"

F32 s;
CMathVector4D *v0 = MAllocAligned(sizeof(CMathVector4D), 16);
CMathVector4D *v1 = MAllocAligned(sizeof(CMathVector4D), 16);
CMathVector4D *v2 = MAllocAligned(sizeof(CMathVector4D), 16);
CMathMatrix4D *m1 = MAllocAligned(sizeof(CMathMatrix4D), 16);
CMathMatrix4D *m2 = MAllocAligned(sizeof(CMathMatrix4D), 16);

CMathMatrix4D *destMat = MAllocAligned(sizeof(CMathMatrix4D), 16);
CMathVector4D *destVec = MAllocAligned(sizeof(CMathVector4D), 16);

CMathMatrix4D *trueMatRes = MAllocAligned(sizeof(CMathMatrix4D), 16);
CMathVector4D *trueVecRes = MAllocAligned(sizeof(CMathVector4D), 16);

F32 theta;

CMathVector4D *countVec = MAllocAligned(sizeof(CMathVector4D), 16);
MathVector4DInit(1.0, 2.0, 3.0, 4.0, countVec);

CMathMatrix4D *countMat = MAllocAligned(sizeof(CMathMatrix4D), 16);
MathVector4DInit(1.0, 2.0, 3.0, 4.0, &countMat->vec[0]);
MathVector4DInit(5.0, 6.0, 7.0, 8.0, &countMat->vec[1]);
MathVector4DInit(9.0, 10.0, 11.0, 12.0, &countMat->vec[2]);
MathVector4DInit(13.0, 14.0, 15.0, 16.0, &countMat->vec[3]);

//-----------------------------------------------------------------------------
// MathMatrix4DMulVector4D

MathVector4DInit(90.0, 100.0, 110.0, 120.0, trueVecRes);
MathMatrix4DMulVector4D(countMat, countVec, destVec);
if (!MathVector4DIsEqual(destVec, trueVecRes))
{
	"[WARNING] MathMatrix4DMulMathVector4D NOT WORKING CORRECTLY! RESULT VECTOR:\n";
	MathVector4DPrint(destVec);
}
//-----------------------------------------------------------------------------
// MathMatrix4DMul

MathVector4DInit(90.0,	100.0,	110.0,	120.0,	&trueMatRes->vec[0]);
MathVector4DInit(202.0,	228.0,	254.0,	280.0,	&trueMatRes->vec[1]);
MathVector4DInit(314.0, 356.0,	398.0,	440.0,	&trueMatRes->vec[2]);
MathVector4DInit(426.0,	484.0,	542.0,	600.0,	&trueMatRes->vec[3]);
MathMatrix4DMul(countMat, countMat, destMat);
if (!MathMatrix4DIsEqual(destMat, trueMatRes))
{
	"[WARNING] MathMatrix4DMul NOT WORKING CORRECTLY! RESULT MATRIX:\n";
	MathMatrix4DPrint(destMat);
}
//-----------------------------------------------------------------------------
// MathMatrix4DTranspose

MathVector4DInit(1.0,	5.0,	9.0,	13.0,	&trueMatRes->vec[0]);
MathVector4DInit(2.0,	6.0,	10.0,	14.0,	&trueMatRes->vec[1]);
MathVector4DInit(3.0,	7.0,	11.0,	15.0,	&trueMatRes->vec[2]);
MathVector4DInit(4.0,	8.0,	12.0,	16.0,	&trueMatRes->vec[3]);
MathMatrix4DTranspose(countMat, destMat);
if (!MathMatrix4DIsEqual(destMat, trueMatRes))
{
	"[WARNING] MathMatrix4DSetTranspose NOT WORKING CORRECTLY! RESULT MATRIX:\n";
	MathMatrix4DPrint(destMat); 
}
//-----------------------------------------------------------------------------
// MathMatrix4DTranslationSet

MathVector4DInit(1.0,	0.0,	0.0,	0.0,	&trueMatRes->vec[0]);
MathVector4DInit(0.0,	1.0,	0.0,	0.0,	&trueMatRes->vec[1]);
MathVector4DInit(0.0,	0.0,	1.0,	0.0,	&trueMatRes->vec[2]);
MathVector4DInit(2.0,	3.0,	4.0,	1.0,	&trueMatRes->vec[3]);
MathMatrix4DTranslationSet(MathF64ToF32(2.0), MathF64ToF32(3.0), MathF64ToF32(4.0), destMat);
if (!MathMatrix4DIsEqual(destMat, trueMatRes))
{
	"[WARNING] MathMatrix4DSetTranslation NOT WORKING CORRECTLY! RESULT MATRIX:\n";
	MathMatrix4DPrint(destMat); 
}
//-----------------------------------------------------------------------------
// MathMatrix4DScaleSet

MathVector4DInit(2.0,	0.0,	0.0,	0.0,	&trueMatRes->vec[0]);
MathVector4DInit(0.0,	3.0,	0.0,	0.0,	&trueMatRes->vec[1]);
MathVector4DInit(0.0,	0.0,	4.0,	0.0,	&trueMatRes->vec[2]);
MathVector4DInit(0.0,	0.0,	0.0,	1.0,	&trueMatRes->vec[3]);
MathMatrix4DScaleSet(MathF64ToF32(2.0), MathF64ToF32(3.0), MathF64ToF32(4.0), destMat);
if (!MathMatrix4DIsEqual(destMat, trueMatRes))
{
	"[WARNING] MathMatrix4DSetScale NOT WORKING CORRECTLY! RESULT MATRIX:\n";
	MathMatrix4DPrint(destMat); 
}
//-----------------------------------------------------------------------------
// MathMatrix4DRotationSet

//-----------------------------------------------------------------------------
// MathMatrix4DLookAtSet

MathVector3DInit(2.0, 3.0, 4.0, v0);	// Eye
MathVector3DInit(1.0, -2.0, -3.0, v1);	// Center
MathVector3DInit(0.0, 0.0, 1.0, v2);	// Up
MathMatrix4DLookAtSet(v0, v1, v2, destMat);
MathMatrix4DPrint(destMat);
//-----------------------------------------------------------------------------